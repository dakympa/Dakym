# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FwVYOLwVSHLCOAcF2vueIztXTOVx2Ijx
"""

def display_menu():
    """Displays the main menu options."""
    print("\nBest Buy Retail Store - Point of Sale System")
    print("1. Add Item to Cart")
    print("2. Remove Item from Cart")
    print("3. View Cart")
    print("4. Checkout")
    print("5. Exit")

def get_product_catalog():
    """Returns the predefined product catalog."""
    return {
        "Apple": {"price": 100, "stock": 20},
        "Banana": {"price": 50, "stock": 30},
        "Milk": {"price": 250, "stock": 15},
        "Bread": {"price": 300, "stock": 10},
        "Eggs": {"price": 350, "stock": 25},
        "Chicken": {"price": 800, "stock": 8},
        "Rice": {"price": 500, "stock": 12},
        "Pasta": {"price": 400, "stock": 18},
        "Juice": {"price": 200, "stock": 22},
        "Water": {"price": 80, "stock": 40},
    }

def add_to_cart(cart, catalog):
    """Adds an item to the shopping cart."""
    product_name = input("Enter product name: ").capitalize()
    quantity = input("Enter quantity: ")

    if not quantity.isdigit():
        print("Invalid quantity. Please enter a number.")
        return

    quantity = int(quantity)

    if product_name not in catalog:
        print("Product not found.")
        return

    if catalog[product_name]["stock"] < quantity:
        print("Insufficient stock.")
        return

    if product_name in cart:
        cart[product_name] += quantity
    else:
        cart[product_name] = quantity

    catalog[product_name]["stock"] -= quantity
    print(f"{quantity} {product_name}(s) added to cart.")
    check_low_stock(catalog)

def remove_from_cart(cart, catalog):
    """Removes an item from the shopping cart."""
    product_name = input("Enter product name to remove: ").capitalize()

    if product_name not in cart:
        print("Product not in cart.")
        return

    quantity = input("Enter quantity to remove: ")

    if not quantity.isdigit():
        print("Invalid quantity. Please enter a number.")
        return

    quantity = int(quantity)

    if quantity > cart[product_name]:
        print(f"Cannot remove more than {cart[product_name]} {product_name}(s).")
        return

    cart[product_name] -= quantity
    catalog[product_name]["stock"] += quantity

    if cart[product_name] == 0:
        del cart[product_name]
    print(f"{quantity} {product_name}(s) removed from cart.")

def view_cart(cart, catalog):
    """Displays the items in the shopping cart."""
    if not cart:
        print("Cart is empty.")
        return

    print("\nShopping Cart:")
    total = 0
    for product, quantity in cart.items():
        price = catalog[product]["price"]
        item_total = price * quantity
        print(f"{product}: {quantity} x ${price} = ${item_total}")
        total += item_total
    print(f"Subtotal: ${total}")

def checkout(cart, catalog):
    """Handles the checkout process."""
    if not cart:
        print("Cart is empty. Cannot checkout.")
        return

    view_cart(cart, catalog)

    total = 0
    for product, quantity in cart.items():
        total += catalog[product]["price"] * quantity

    tax = total * 0.10
    total_with_tax = total + tax

    if total_with_tax > 5000:
        discount = total_with_tax * 0.05
        total_with_tax -= discount
        print(f"Discount (5%): ${discount:.2f}")

    print(f"Sales Tax (10%): ${tax:.2f}")
    print(f"Total: ${total_with_tax:.2f}")

    while True:
        payment = input("Enter payment amount: ")
        if not payment.replace('.','',1).isdigit():
            print("Invalid payment amount. Please enter a number.")
            continue
        payment = float(payment)
        if payment < total_with_tax:
            print("Insufficient payment.")
        else:
            change = payment - total_with_tax
            print(f"Change: ${change:.2f}")
            generate_receipt(cart, catalog, total, tax, total_with_tax, payment, change)
            cart.clear()
            break

def generate_receipt(cart, catalog, subtotal, tax, total_with_tax, payment, change):
    """Generates and prints the receipt."""
    print("\n--- Best Buy Retail Store Receipt ---")
    for product, quantity in cart.items():
        price = catalog[product]["price"]
        item_total = price * quantity
        print(f"{product}: {quantity} x ${price} = ${item_total:.2f}")

    print(f"Subtotal: ${subtotal:.2f}")
    print(f"Sales Tax (10%): ${tax:.2f}")
    print(f"Total: ${total_with_tax:.2f}")
    print(f"Payment: ${payment:.2f}")
    print(f"Change: ${change:.2f}")
    print("Thank you for shopping at Best Buy!")

def check_low_stock(catalog):
    """Displays low stock alerts."""
    for product, details in catalog.items():
        if details["stock"] < 5:
            print(f"Low stock alert: {product} has {details['stock']} units remaining.")

def main():
    """Main function to run the POS system."""
    catalog = get_product_catalog()
    cart = {}

    while True:
        display_menu()
        choice = input("Enter your choice: ")

        if choice == "1":
            add_to_cart(cart, catalog)
        elif choice == "2":
            remove_from_cart(cart, catalog)
        elif choice == "3":
            view_cart(cart, catalog)
        elif choice == "4":
            checkout(cart, catalog)
        elif choice == "5":
            print("Exiting POS system.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()